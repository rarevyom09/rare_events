import React, { useContext, useEffect, useState } from "react";
import { Link } from "react-router-dom";
import { AuthContext } from "../AuthContext";
import gravatar from 'gravatar'; // Import the gravatar package
import Avatar from 'react-avatar';

const Header = () => {
  const { userInfo, setUserInfo } = useContext(AuthContext);
  const [dropdownOpen, setDropdownOpen] = useState(false);

  useEffect(() => {
    const fetchUserInfo = async () => {
      try {
        // Retrieve the token from local storage
        const token = localStorage.getItem('token');

        const response = await fetch("http://localhost:4000/profile", {
          credentials: "include",
          headers: {
            // Add the Authorization header with the token
            'Authorization': `Bearer ${token}`,
          },
        });

        if (response.ok) {
          const data = await response.json();
          setUserInfo(data);
          console.log(data);
        } else {
          // Handle errors or unauthorized access
          const errorData = await response.json();
          console.error("Failed to fetch user information:", errorData);
        }
      } catch (error) {
        console.error("Error:", error);
      }
    };

    fetchUserInfo();
  }, [setUserInfo]);

  const handleLogout = async () => {
    try {
      // Make a POST request to the logout endpoint
      const response = await fetch('http://localhost:4000/logout', {
        method: 'POST',
        credentials: 'include', // To include cookies in the request
      });

      if (response.ok) {
        // Clear user data, such as JWT token, from the client-side
        localStorage.removeItem('token');
        // Clear user information in the context
        setUserInfo(null);
        window.location.href = '/login'; // Redirect to login page
      } else {
        // Handle logout errors
        console.error('Logout failed');
      }
    } catch (error) {
      console.error('Error:', error);
    }
  };

  // Check if the token is present in local storage
  const token = localStorage.getItem('token');
  const token_available = token ? true : false;
  console.log("token updated: " + token_available);

  // Dynamically generate the user's avatar URL using Gravatar
  const avatarUrl = gravatar.url(userInfo.email, { s: '200', r: 'pg', d: 'identicon' });
  console.log(userInfo.email);

  return (
    <nav className="bg-gray-900 p-6">
      <div className="container mx-auto flex items-center justify-between">
        <div className="flex items-center space-x-4">
          <Link to="/" className="logo">
            <img src="images/rarelogo.png" alt="Logo" className="h-10" />
          </Link>
        </div>
        <div className="space-x-4">
          <Link
            to="/explore"
            className="text-slate-100 hover:text-teal-400 font-mono text-xl"
          >
            Explore
          </Link>
          {token_available ? (
            <>
              <Link
                to="/create"
                className="text-slate-100 hover:text-teal-400 font-mono text-xl"
              >
                Create
              </Link>
              <Link
                to="/dashboard"
                className="text-slate-100 hover:text-teal-400 font-mono text-xl"
              >
                Dashboard
              </Link>
              <div className="relative inline-block text-left">
                <button
                  onClick={() => setDropdownOpen(!dropdownOpen)}
                  className="text-slate-100 hover:text-teal-400 font-mono text-xl cursor-pointer"
                >
                  <Avatar
                    name={userInfo.username}
                    size="50" // Set the desired size of the avatar
                    round={true} // Make the avatar round
                    src={avatarUrl} // Use the avatar URL generated by Gravatar
                  />
                  
                </button>
                {dropdownOpen && (
                  <div className="origin-top-right absolute right-0 mt-2 w-44 rounded-lg shadow-lg bg-white ring-1 ring-black ring-opacity-5 divide-y divide-gray-100 z-50">
                    <div className="py-1">
                      <div className="block px-4 py-2 text-xl font-bold font-roboto text-black text-gray-700">{userInfo.username}</div>
                      <a
                        href="#"
                        className="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 hover:text-gray-900"
                      >
                        Dashboard
                      </a>
                      <a
                        href="#"
                        className="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 hover:text-gray-900"
                      >
                        Settings
                      </a>
                      <a
                        href="#"
                        className="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 hover:text-gray-900"
                      >
                        Earnings
                      </a>
                    </div>
                    <hr className="bg"/>
                    <div className="py-1">
                      <a
                        href="#"
                        className="block px-4 py-2 text-sm text-gray-800 hover:bg-red-100 hover:text-red-900"
                        onClick={handleLogout}
                      >
                        Sign out
                      </a>
                    </div>
                  </div>
                )}
              </div>
            </>
          ) : (
            <>
              <Link
                to="/login"
                className="text-slate-100 hover:text-teal-400 font-mono text-xl"
              >
                Login
              </Link>
              <Link
                to="/register"
                className="text-slate-100 hover:text-teal-400 font-mono text-xl"
              >
                Register
              </Link>
            </>
          )}
        </div>
      </div>
    </nav>
  );
};

export default Header;
